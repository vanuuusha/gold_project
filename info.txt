# Руководство разработчика приложения Precious Metals Analytics

## Структура каталогов

- `/` - корневой каталог проекта
  - `app.py` - основной файл приложения, точка входа
  - `settings.py` - конфигурационные настройки приложения
  - `setup_instructions.txt` - инструкции по настройке приложения
  - `environment.yml` - файл окружения Conda с зависимостями
  - `.gitignore` - файл для игнорирования Git
  - `/views/` - директория с компонентами пользовательского интерфейса
    - `__init__.py` - инициализация модуля представлений
    - `components.py` - общие UI компоненты
    - `data_collection.py` - UI для сбора данных
    - `database_management.py` - UI для управления базой данных
    - `visual_dashboard.py` - основной визуальный дашборд
  - `/database/` - директория с модулями базы данных
    - `data_collector.py` - класс для сбора данных о ценах на металлы
    - `init_database.py` - инициализация БД и модели данных
    - `database_client.py` - клиент для работы с БД
  - `/assets/` - статические ресурсы (CSS, изображения)

## Описание модулей и классов

### Основные модули

#### app.py
Основной файл приложения на базе Dash и Flask, который инициализирует сервер, настраивает маршруты и запускает планировщик задач в фоновом режиме.

**Основные функции:**
- `scheduler_thread()` - фоновый поток для периодической проверки запланированных задач
- `display_page(pathname)` - маршрутизация страниц приложения
- `initialize_db(reset_schedules)` - инициализация базы данных
- `update_global_theme(dark_mode)` - обновление темы приложения

#### settings.py
Модуль с конфигурационными настройками приложения.

**Основные конфигурации:**
- `DB_CONFIG` - настройки соединения с базой данных MySQL
- `APP_CONFIG` - настройки приложения Flask/Dash
- `COLLECTOR_CONFIG` - настройки сборщика данных
- `METAL_TYPES` - доступные типы металлов
- `SOURCE_METALS_CONFIG` - конфигурация источников данных для металлов

### Модули базы данных

#### database/init_database.py
Модуль для инициализации базы данных, содержит модели данных и функции для создания и управления таблицами.

**Основные классы:**
- `MetalType(enum.Enum)` - перечисление типов металлов (GOLD, COPPER)
- `DataSource(enum.Enum)` - перечисление источников данных (YFINANCE)
- `MetalPrice(Base)` - модель данных цен на металлы
- `CollectorSchedule(Base)` - модель расписаний сбора данных

**Основные функции:**
- `drop_all_tables(engine)` - удаление всех таблиц в БД
- `init_database(force_reset_schedules)` - инициализация базы данных
- `init_schedules(session, force_reset)` - инициализация расписаний сбора данных
- `create_default_schedules(session)` - создание расписаний по умолчанию

#### database/data_collector.py
Модуль для сбора и обновления данных о ценах на металлы из различных источников.

**Основные классы:**
- `DataCollector` - класс для сбора данных о ценах на металлы

**Методы класса DataCollector:**
- `get_metal_prices_yfinance(metal_type, start_date, end_date)` - получение цен металлов из YFinance
- `update_missing_metal_prices(metal_name, default_start_date)` - обновление недостающих данных для указанного металла
- `start_scheduler()` - запуск планировщика задач в отдельном потоке
- `_run_task_scheduler()` - планировщик задач для обновления данных металлов
- `run_scheduled_tasks()` - запуск запланированных задач

#### database/database_client.py
Клиент для работы с базой данных, предоставляет соединение с БД для других модулей.

### Модули представлений

#### views/__init__.py
Инициализация модуля представлений и регистрация callback-функций Dash.

**Основные функции:**
- `register_callbacks(app)` - регистрация колбэков из всех модулей представления

#### views/components.py
Общие компоненты пользовательского интерфейса для повторного использования.

#### views/data_collection.py
Интерфейс для управления процессом сбора данных о ценах на металлы.

#### views/database_management.py
Интерфейс для управления базой данных, просмотра и редактирования данных.

#### views/visual_dashboard.py
Основной визуальный дашборд для отображения аналитики цен на драгоценные металлы.

## Технологический стек

1. **Языки программирования:**
   - Python 3.x

2. **Основные библиотеки:**
   - Dash/Plotly - для построения интерактивных веб-дашбордов
   - Flask - в качестве основы веб-сервера
   - SQLAlchemy - ORM для работы с базой данных
   - Loguru - для логирования
   - Pandas - для обработки данных
   - yfinance - для получения данных о ценах на металлы

3. **База данных:**
   - MySQL - хранилище данных

## Процессы и задачи

1. **Сбор данных:**
   - Автоматический сбор данных о ценах на металлы по расписанию
   - Источник данных: Yahoo Finance API (через библиотеку yfinance)
   - Планировщик задач запускается в фоновом режиме

2. **Визуализация данных:**
   - Интерактивные графики цен на металлы
   - Настраиваемые временные интервалы и типы графиков
   - Поддержка темной и светлой темы интерфейса

3. **Управление данными:**
   - Просмотр и редактирование записей в базе данных
   - Ручной запуск сбора данных
   - Настройка расписаний сбора данных 